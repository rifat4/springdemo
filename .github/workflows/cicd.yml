
name: demo-canary-pipeline

on:
  push:
    branches: [ "test" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Login to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build Docker image
        run: docker build -t calften/demo-cicd:latest .

      - name: Push Docker image
        run: docker push calften/demo-cicd:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Ensure Docker is installed
        run: |
          if ! [ -x "$(command -v docker)" ]; then
            echo "Error: Docker is not installed." >&2
            exit 1
          fi

      # Step 1: Run new container alongside old one
      - name: Run new version container
        run: |
          # Remove old "v2" container if exists
          if [ "$(sudo docker ps -aq -f name=demo-v2)" ]; then
            sudo docker rm -f demo-v2
          fi
          # Start new container on port 8081
          sudo docker run -d --name demo-v2 -p 8081:8080 calften/demo-cicd:latest

      # Step 2: Make sure old container exists (run old if first deploy)
      - name: Ensure old container exists
        run: |
          if ! [ "$(sudo docker ps -q -f name=demo-v1)" ]; then
            echo "Old container not found, deploying first version..."
            sudo docker run -d --name demo-v1 -p 8080:8080 calften/demo-cicd:previous
          fi

      # Step 3: Set up NGINX for canary traffic
      - name: Configure NGINX for 90/10 canary
        run: |
          echo '
          events {}
          http {
              upstream app_backend {
                  server localhost:8080 weight=9;   # 90% traffic to v1
                  server localhost:8081 weight=1;   # 10% traffic to v2
              }
              server {
                  listen 80;
                  location / {
                      proxy_pass http://app_backend;
                  }
              }
          }' | sudo tee /etc/nginx/nginx.conf
          sudo nginx -s reload || sudo nginx

      # Step 4: Optionally, clean up after rollout complete (manual step later)
      # sudo docker rm -f demo-v1
      # sudo docker rename demo-v2 demo-v1
