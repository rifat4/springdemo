name: demo-canary-ec2

on:
  push:
    branches: ["test-adammeh"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # ----------------------------
      # Step 1: Checkout code
      # ----------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ----------------------------
      # Step 2: Set up Java
      # ----------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ----------------------------
      # Step 3: Decide which version to build
      # ----------------------------
      - name: Determine build target
        id: build_target
        run: |
          # SSH into EC2 and check if demo-v1 exists
          if ssh -i "${{ secrets.EC2_SSH_KEY }}" ubuntu@${{ secrets.EC2_HOST }} \
            "docker ps -a --format '{{.Names}}' | grep -w demo-v1"; then
            echo "Building v2"
            echo "VERSION=v2" >> $GITHUB_OUTPUT
          else
            echo "Building v1"
            echo "VERSION=v1" >> $GITHUB_OUTPUT
          fi

      # ----------------------------
      # Step 4: Build Docker image
      # ----------------------------
      - name: Build Docker image
        run: |
          mvn clean install -DskipTests
          docker build -t adammeh/demo-cicd:${{ steps.build_target.outputs.VERSION }} \
            --build-arg APP_VERSION=${{ steps.build_target.outputs.VERSION }} .

      # ----------------------------
      # Step 5: Login to Docker Hub
      # ----------------------------
      - name: Login to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME2 }}" -p "${{ secrets.DOCKER_PASSWORD2 }}"

      # ----------------------------
      # Step 6: Push Docker image
      # ----------------------------
      - name: Push Docker image
        run: docker push adammeh/demo-cicd:${{ steps.build_target.outputs.VERSION }}

      # ----------------------------
      # Step 7: Copy NGINX config to EC2
      # ----------------------------
      - name: Copy NGINX config to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ steps.build_target.outputs.VERSION == 'v1' && 'nginx-v1.conf' || 'nginx-canary.conf' }}
          target: "/home/ubuntu/nginx/"
          overwrite: true

      # ----------------------------
      # Step 8: Deploy to EC2
      # ----------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Logging into Docker Hub..."
            docker login -u "${{ secrets.DOCKER_USERNAME2 }}" -p "${{ secrets.DOCKER_PASSWORD2 }}"

            # Ensure Docker network
            docker network create demo-net || true

            # Run v1 if missing
            if ! docker ps -q -f name=demo-v1; then
              echo "Starting demo-v1..."
              docker run -d --name demo-v1 --network demo-net -p 8081:8080 adammeh/demo-cicd:v1
            fi

            # Run v2 if being deployed
            if docker image inspect adammeh/demo-cicd:v2 >/dev/null 2>&1; then
              docker rm -f demo-v2 2>/dev/null || true
              docker run -d --name demo-v2 --network demo-net -p 8082:8080 adammeh/demo-cicd:v2
            fi

            # Start or reload NGINX
            docker rm -f nginx 2>/dev/null || true
            docker run -d --name nginx --network demo-net -p 80:80 -v /home/ubuntu/nginx:/etc/nginx:ro nginx:latest

            echo "âœ… Deployment complete!"
            echo "NGINX canary URL: http://<your-ec2-public-ip>"
            echo "Direct v1 URL: http://<your-ec2-public-ip>:8081"
            echo "Direct v2 URL: http://<your-ec2-public-ip>:8082"
