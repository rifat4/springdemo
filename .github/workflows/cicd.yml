name: demo-canary-ec2-dynamic

on:
  push:
    branches: ["test-adammeh"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}

    steps:
      # ----------------------------
      # Step 1: Checkout code
      # ----------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ----------------------------
      # Step 2: Set up Java
      # ----------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ----------------------------
      # Step 3: Determine version (v1 or v2)
      # ----------------------------
      - name: Check which version to build
        id: set_version
        run: |
          echo "Checking if v1 exists on Docker Hub..."
          if docker pull adammeh/demo-cicd:v1 >/dev/null 2>&1; then
            echo "v1 exists, building v2"
            echo "VERSION=v2" >> $GITHUB_OUTPUT
          else
            echo "v1 does not exist, building v1"
            echo "VERSION=v1" >> $GITHUB_OUTPUT
          fi

      # ----------------------------
      # Step 4: Build Docker image
      # ----------------------------
      - name: Build Docker image
        run: |
          mvn clean install -DskipTests
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          docker build -t adammeh/demo-cicd:$VERSION --build-arg APP_VERSION=$VERSION .

      # ----------------------------
      # Step 5: Login to Docker Hub
      # ----------------------------
      - name: Docker Hub login
        run: docker login -u "${{ secrets.DOCKER_USERNAME2 }}" -p "${{ secrets.DOCKER_PASSWORD2 }}"

      # ----------------------------
      # Step 6: Push Docker image
      # ----------------------------
      - name: Push Docker image
        run: |
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          docker push adammeh/demo-cicd:$VERSION

      # ----------------------------
      # Step 7: Choose NGINX config file
      # ----------------------------
      - name: Set NGINX config file
        id: nginx_file
        run: |
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          if [ "$VERSION" = "v1" ]; then
            echo "file=nginx.conf" >> $GITHUB_OUTPUT
          else
            echo "file=nginx2.conf" >> $GITHUB_OUTPUT
          fi

      # ----------------------------
      # Step 8: Copy NGINX config to EC2
      # ----------------------------
      - name: Copy NGINX config
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ steps.nginx_file.outputs.file }}
          target: "/home/ubuntu/nginx/"
          overwrite: true

      # ----------------------------
      # Step 9: SSH into EC2 and deploy containers
      # ----------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            VERSION="${{ steps.set_version.outputs.VERSION }}"

            # Login to Docker Hub
            docker login -u "${{ secrets.DOCKER_USERNAME2 }}" -p "${{ secrets.DOCKER_PASSWORD2 }}"

            # Create network if needed
            docker network create demo-net || true

            if [ "$VERSION" = "v1" ]; then
              # Start v1 if not running
              if ! [ "$(docker ps -q -f name=demo-v1)" ]; then
                docker run -d --name demo-v1 --network demo-net -p 8081:8080 adammeh/demo-cicd:v1
              fi
            else
              # Stop old v2 if exists
              docker rm -f demo-v2 2>/dev/null || true
              # Start v2
              docker run -d --name demo-v2 --network demo-net -p 8082:8080 adammeh/demo-cicd:v2
            fi

            # Restart NGINX to pick up new config
            docker rm -f nginx 2>/dev/null || true
            if [ "$VERSION" = "v1" ]; then
              docker run -d --name nginx --network demo-net -p 80:80 \
                -v /home/ubuntu/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
                nginx:latest
            else
              docker run -d --name nginx --network demo-net -p 80:80 \
                -v /home/ubuntu/nginx/nginx2.conf:/etc/nginx/nginx.conf:ro \
                nginx2:latest
            fi
            

            echo "âœ… Deployment complete! VERSION=$VERSION"
